/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Scheduler;

import Classes.Hall;
import Classes.IOMethods;
import Classes.Scheduler;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;
import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.components.TimePickerSettings;
import com.github.lgooddatepicker.components.TimePickerSettings.TimeIncrement;
/**
 *
 * @author Hg
 */
public class Scheduler_Scheduling extends javax.swing.JFrame {

    /**
     * Creates new form Scheduler_addHall
     */
    
    //instance for page
    private int page;
    private String userID;
    
    private String hallID;
    private String hallName;
    private ArrayList<String> hallRow;
    private LocalDate scheduleStartDate;
    private LocalDate scheduleEndDate;
    private ArrayList<ArrayList<String>> bookedHalls = IOMethods.readFile(IOMethods.BOOKINGTEXT);
    private Calendar now = Calendar.getInstance();
    private LocalDate today = LocalDate.now();
    
    public Scheduler_Scheduling() {
        initComponents();
    }
    
    public Scheduler_Scheduling(int page,String userID, String hallID, String hallName)
    {
        
        initComponents();
        this.page = page;
        dateTimePickerStartDate.datePicker.setDate(today);
        this.userID = userID;
        this.hallID = hallID;
        labelHallName.setText(hallName);
       
        
        //loop txt file to import hall details
        Hall hall = new Hall();
        
        ArrayList<ArrayList<String>> hallList = hall.getHallList();
        for (ArrayList<String> row : hallList)
        {
           if (row.get(0).equals(hallID))
           {
               hallRow = row;
               break;
           }
        }
        
        

        //loop schedule.txt to import schedule start and end date
        ArrayList<ArrayList<String>> schedule = IOMethods.readFile(IOMethods.SCHEDULETEXT);
        scheduleStartDate = LocalDate.parse(schedule.get(0).get(0));
        
        //no scheduler end date (Scheduler is god)
//        scheduleEndDate = LocalDate.parse(schedule.get(0).get(1));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        capacitySpinner = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        labelHallName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        eventTypeComboBox = new javax.swing.JComboBox<>();
        btnAddSchedule = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        capacitySpinner1 = new javax.swing.JSpinner();
        DatePickerSettings dateSettings = new DatePickerSettings();
        TimePickerSettings datetimeSettings = new TimePickerSettings();

        datetimeSettings.generatePotentialMenuTimes(TimeIncrement.OneHour, LocalTime.of(8, 0), LocalTime.of(17, 0));
        dateTimePickerStartDate = new com.github.lgooddatepicker.components.DateTimePicker(dateSettings,datetimeSettings);
        TimePickerSettings timeSettings = new TimePickerSettings();

        timeSettings.setAllowKeyboardEditing(false);
        timeSettings.generatePotentialMenuTimes(TimeIncrement.OneHour, LocalTime.of(9,0), LocalTime.of(18,0));
        timePickerEndTime = new com.github.lgooddatepicker.components.TimePicker(timeSettings);
        checkBoxEntireDay = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaRemarks = new javax.swing.JTextArea();

        capacitySpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setSize(new java.awt.Dimension(582, 484));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(600, 488));
        jPanel1.setMinimumSize(new java.awt.Dimension(600, 488));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(224, 251, 255));
        jPanel3.setForeground(new java.awt.Color(14, 251, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 75, Short.MAX_VALUE)
        );

        labelHallName.setText("Hall Name");
        labelHallName.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelHallName.setForeground(new java.awt.Color(0, 0, 0));

        jLabel2.setText("From");
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));

        jLabel3.setText("To");
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));

        jLabel4.setText("Purpose");
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));

        jLabel5.setText("Remarks");
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));

        eventTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Event", "Maintenance" }));
        eventTypeComboBox.setBackground(new java.awt.Color(255, 255, 255));
        eventTypeComboBox.setForeground(new java.awt.Color(0, 0, 0));

        btnAddSchedule.setText("Schedule");
        btnAddSchedule.setBackground(new java.awt.Color(87, 114, 255));
        btnAddSchedule.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAddSchedule.setForeground(new java.awt.Color(255, 255, 255));
        btnAddSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddScheduleActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.setBackground(new java.awt.Color(87, 114, 255));
        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel7.setText("Pax");
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));

        capacitySpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        LocalDate now = LocalDate.now();
        dateSettings.setDateRangeLimits(now, null);
        dateTimePickerStartDate.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                dateTimePickerStartDateComponentAdded(evt);
            }
        });
        datetimeSettings.setAllowKeyboardEditing(false);
        dateSettings.setAllowKeyboardEditing(false);

        checkBoxEntireDay.setText("Entire Day");
        checkBoxEntireDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxEntireDayActionPerformed(evt);
            }
        });

        textAreaRemarks.setColumns(20);
        textAreaRemarks.setLineWrap(true);
        textAreaRemarks.setRows(5);
        jScrollPane1.setViewportView(textAreaRemarks);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(labelHallName)
                    .addComponent(jLabel3)
                    .addComponent(capacitySpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(dateTimePickerStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(timePickerEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkBoxEntireDay, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(57, 57, 57))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelHallName)
                    .addComponent(btnBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dateTimePickerStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timePickerEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBoxEntireDay))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eventTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(capacitySpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnAddSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddScheduleActionPerformed
        // TODO add your handling code here:
        
        //Opening time for halls daily = 8am 
        //Closing Time for halls daily = 5pm
        LocalTime startTime = LocalTime.of(8, 0);
        LocalTime endTime = LocalTime.of(17, 0);
        
        

        //validation code 
        boolean overlappingBooking = false;
        
        
        /*
        code for validating if new booking date time is overlapping with 
        existing bookings for hall selected
        */
        
        LocalTime startTimeSelected= dateTimePickerStartDate.timePicker.getTime();
        LocalTime endTimeSelected= timePickerEndTime.getTime();
        
        for (ArrayList<String> row : bookedHalls)
        {
            LocalTime bookStartTime = LocalTime.parse(row.get(4));
            LocalTime bookEndTime = LocalTime.parse(row.get(5));
            //check for same date
            //Logic (startTime < bookedStartTime or bookedStartTime is before selectedEndTime
            if (row.get(1).equals(hallID) && row.get(3).equals(dateTimePickerStartDate.getDatePicker().getDate().toString()))
            {
               if (startTimeSelected.isBefore(bookEndTime) && (bookStartTime).isBefore(endTimeSelected))
               {
                   overlappingBooking = true;
               }
            }
        }
        //validate one by one to prevent nested if-else
        
        //validate DatePicker is not empty
        if (dateTimePickerStartDate.getDatePicker().getDate()== null )
        {
            JOptionPane.showMessageDialog(null, "Please select date.");
        }
        //validate TimePicker is not empty
        else if (dateTimePickerStartDate.getTimePicker().getTime() == null ||(timePickerEndTime.getTime() == null ))
        {
            JOptionPane.showMessageDialog(null, "Please select time.");
        }
          //validate start time with the time now
        else if (dateTimePickerStartDate.getDatePicker().getDate().isEqual(today) && dateTimePickerStartDate.getTimePicker().getTime().isBefore(LocalTime.now()))
        {
            
            JOptionPane.showMessageDialog(null, "Its "+ LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm")) + " now.\nPlease select another time.");
        }
        
        //validate endTime Time Picker time is not before selected start time and not after 5pm (closing time)
        else if(timePickerEndTime.getTime().isBefore(dateTimePickerStartDate.getTimePicker().getTime()) )
        {
            JOptionPane.showMessageDialog(null, "Invalid start / end time.\nEnd time must be after the start time.");
        }
        //add one more logic
        else if (overlappingBooking)
        {
            JOptionPane.showMessageDialog(null, "Selected timeslot overlapping with existing timeslot(s).\nPlease select another timeslot.");
        }
        else if (Integer.parseInt(capacitySpinner1.getValue().toString()) > Integer.parseInt(hallRow.get(4)))
        {
            JOptionPane.showMessageDialog(null, "This hall is for " + hallRow.get(4) + " people only.\n Please book another hall. Thank you.");
            
        }
        else if(textAreaRemarks.getText().contains("\n"))
        {
            JOptionPane.showMessageDialog(null, "Please do not enter multiple lines at remarks.");
            
        }
        else if (dateTimePickerStartDate.timePicker.getTime().equals(timePickerEndTime.getTime()))
        {
            JOptionPane.showMessageDialog(null, "Start time cannot be same with end time.");
        }
        else
        {
            ArrayList<String> newBooking = new ArrayList<String>();
            
            
            newBooking.add(IOMethods.updateIndex("BK", 6));
            newBooking.add(hallID);
            newBooking.add(userID);
            newBooking.add(dateTimePickerStartDate.getDatePicker().getDate().toString());
           
            if (checkBoxEntireDay.isSelected())
            {
                newBooking.add(LocalTime.of(8, 0).toString());
                newBooking.add(LocalTime.of(17, 0).toString());
            }
            else
            {
                newBooking.add(dateTimePickerStartDate.getTimePicker().getTime().toString());
                newBooking.add(timePickerEndTime.getTime().toString());
            }
            newBooking.add(capacitySpinner1.getValue().toString());
            
            String booking = (String) eventTypeComboBox.getSelectedItem();
            char zero = booking.charAt(0);
            
            newBooking.add(Character.toString(zero));
            if (textAreaRemarks.getText().length()==0)
            {
                
                newBooking.add("No remarks");
            }
            else
            {
                newBooking.add(textAreaRemarks.getText());
            }
            
            //no money is required for special event
            newBooking.add("0");
            
            LocalDateTime instance = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = instance.format(formatter);      
            newBooking.add(formattedDateTime);
            
            
            
            Scheduler scheduler = new Scheduler();
            scheduler.addEvent(newBooking);
            JOptionPane.showMessageDialog(null, "Booking for " + booking.toLowerCase() +" added successfully");
            this.dispose();
            new Scheduler_mainPageHardCode(userID, page);
        }
        
       
        
    }//GEN-LAST:event_btnAddScheduleActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new Scheduler_mainPageHardCode(userID,page);
    }//GEN-LAST:event_btnBackActionPerformed

    private void dateTimePickerStartDateComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dateTimePickerStartDateComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_dateTimePickerStartDateComponentAdded

    private void checkBoxEntireDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxEntireDayActionPerformed
        // TODO add your handling code here:
        
        
        //set entire day from 8am to 6pm , disable time pickers
        if (checkBoxEntireDay.isSelected())
        {
            dateTimePickerStartDate.timePicker.setTime(LocalTime.of(8,0));
            dateTimePickerStartDate.timePicker.setEnabled(false);
            timePickerEndTime.setTime(LocalTime.of(18,0));
            timePickerEndTime.setEnabled(false);
        }
        else
        {
            //enable time pickers
            dateTimePickerStartDate.timePicker.setEnabled(true);
            timePickerEndTime.setEnabled(true);
        }
    }//GEN-LAST:event_checkBoxEntireDayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Scheduler_addHall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Scheduler_addHall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Scheduler_addHall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Scheduler_addHall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Scheduler_Scheduling().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSchedule;
    private javax.swing.JButton btnBack;
    private javax.swing.JSpinner capacitySpinner;
    private javax.swing.JSpinner capacitySpinner1;
    private javax.swing.JCheckBox checkBoxEntireDay;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePickerStartDate;
    private javax.swing.JComboBox<String> eventTypeComboBox;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelHallName;
    private javax.swing.JTextArea textAreaRemarks;
    private com.github.lgooddatepicker.components.TimePicker timePickerEndTime;
    // End of variables declaration//GEN-END:variables
}
